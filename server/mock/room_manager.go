// Code generated by MockGen. DO NOT EDIT.
// Source: managers/room_manager.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	models "paper-tracker/models"
	reflect "reflect"
)

// MockRoomManager is a mock of RoomManager interface
type MockRoomManager struct {
	ctrl     *gomock.Controller
	recorder *MockRoomManagerMockRecorder
}

// MockRoomManagerMockRecorder is the mock recorder for MockRoomManager
type MockRoomManagerMockRecorder struct {
	mock *MockRoomManager
}

// NewMockRoomManager creates a new mock instance
func NewMockRoomManager(ctrl *gomock.Controller) *MockRoomManager {
	mock := &MockRoomManager{ctrl: ctrl}
	mock.recorder = &MockRoomManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoomManager) EXPECT() *MockRoomManagerMockRecorder {
	return m.recorder
}

// CreateRoom mocks base method
func (m *MockRoomManager) CreateRoom(room *models.Room) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", room)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRoom indicates an expected call of CreateRoom
func (mr *MockRoomManagerMockRecorder) CreateRoom(room interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockRoomManager)(nil).CreateRoom), room)
}

// GetRoomByID mocks base method
func (m *MockRoomManager) GetRoomByID(roomID models.RoomID) (*models.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomByID", roomID)
	ret0, _ := ret[0].(*models.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomByID indicates an expected call of GetRoomByID
func (mr *MockRoomManagerMockRecorder) GetRoomByID(roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomByID", reflect.TypeOf((*MockRoomManager)(nil).GetRoomByID), roomID)
}

// GetAllRooms mocks base method
func (m *MockRoomManager) GetAllRooms() ([]*models.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRooms")
	ret0, _ := ret[0].([]*models.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRooms indicates an expected call of GetAllRooms
func (mr *MockRoomManagerMockRecorder) GetAllRooms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRooms", reflect.TypeOf((*MockRoomManager)(nil).GetAllRooms))
}

// SetRoomLearned mocks base method
func (m *MockRoomManager) SetRoomLearned(roomID models.RoomID, learned bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRoomLearned", roomID, learned)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRoomLearned indicates an expected call of SetRoomLearned
func (mr *MockRoomManagerMockRecorder) SetRoomLearned(roomID, learned interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRoomLearned", reflect.TypeOf((*MockRoomManager)(nil).SetRoomLearned), roomID, learned)
}

// UpdateRoom mocks base method
func (m *MockRoomManager) UpdateRoom(room *models.Room) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoom", room)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoom indicates an expected call of UpdateRoom
func (mr *MockRoomManagerMockRecorder) UpdateRoom(room interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoom", reflect.TypeOf((*MockRoomManager)(nil).UpdateRoom), room)
}

// DeleteRoom mocks base method
func (m *MockRoomManager) DeleteRoom(roomID models.RoomID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoom", roomID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoom indicates an expected call of DeleteRoom
func (mr *MockRoomManagerMockRecorder) DeleteRoom(roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoom", reflect.TypeOf((*MockRoomManager)(nil).DeleteRoom), roomID)
}
