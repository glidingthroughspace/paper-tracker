// Code generated by MockGen. DO NOT EDIT.
// Source: repositories/workflow_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	models "paper-tracker/models"
	reflect "reflect"
)

// MockWorkflowRepository is a mock of WorkflowRepository interface
type MockWorkflowRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowRepositoryMockRecorder
}

// MockWorkflowRepositoryMockRecorder is the mock recorder for MockWorkflowRepository
type MockWorkflowRepositoryMockRecorder struct {
	mock *MockWorkflowRepository
}

// NewMockWorkflowRepository creates a new mock instance
func NewMockWorkflowRepository(ctrl *gomock.Controller) *MockWorkflowRepository {
	mock := &MockWorkflowRepository{ctrl: ctrl}
	mock.recorder = &MockWorkflowRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorkflowRepository) EXPECT() *MockWorkflowRepositoryMockRecorder {
	return m.recorder
}

// CreateWorkflow mocks base method
func (m *MockWorkflowRepository) CreateWorkflow(workflow *models.Workflow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflow", workflow)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWorkflow indicates an expected call of CreateWorkflow
func (mr *MockWorkflowRepositoryMockRecorder) CreateWorkflow(workflow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflow", reflect.TypeOf((*MockWorkflowRepository)(nil).CreateWorkflow), workflow)
}

// GetWorkflowByID mocks base method
func (m *MockWorkflowRepository) GetWorkflowByID(workflowID models.WorkflowID) (*models.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowByID", workflowID)
	ret0, _ := ret[0].(*models.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowByID indicates an expected call of GetWorkflowByID
func (mr *MockWorkflowRepositoryMockRecorder) GetWorkflowByID(workflowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowByID", reflect.TypeOf((*MockWorkflowRepository)(nil).GetWorkflowByID), workflowID)
}

// CreateStep mocks base method
func (m *MockWorkflowRepository) CreateStep(step *models.Step) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStep", step)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStep indicates an expected call of CreateStep
func (mr *MockWorkflowRepositoryMockRecorder) CreateStep(step interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStep", reflect.TypeOf((*MockWorkflowRepository)(nil).CreateStep), step)
}

// GetStepByID mocks base method
func (m *MockWorkflowRepository) GetStepByID(stepID models.StepID) (*models.Step, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStepByID", stepID)
	ret0, _ := ret[0].(*models.Step)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStepByID indicates an expected call of GetStepByID
func (mr *MockWorkflowRepositoryMockRecorder) GetStepByID(stepID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStepByID", reflect.TypeOf((*MockWorkflowRepository)(nil).GetStepByID), stepID)
}

// IsRecordNotFoundError mocks base method
func (m *MockWorkflowRepository) IsRecordNotFoundError(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRecordNotFoundError", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRecordNotFoundError indicates an expected call of IsRecordNotFoundError
func (mr *MockWorkflowRepositoryMockRecorder) IsRecordNotFoundError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRecordNotFoundError", reflect.TypeOf((*MockWorkflowRepository)(nil).IsRecordNotFoundError), err)
}
