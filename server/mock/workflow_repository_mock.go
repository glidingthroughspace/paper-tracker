// Code generated by MockGen. DO NOT EDIT.
// Source: repositories/workflow_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	models "paper-tracker/models"
	reflect "reflect"
)

// MockWorkflowRepository is a mock of WorkflowRepository interface
type MockWorkflowRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowRepositoryMockRecorder
}

// MockWorkflowRepositoryMockRecorder is the mock recorder for MockWorkflowRepository
type MockWorkflowRepositoryMockRecorder struct {
	mock *MockWorkflowRepository
}

// NewMockWorkflowRepository creates a new mock instance
func NewMockWorkflowRepository(ctrl *gomock.Controller) *MockWorkflowRepository {
	mock := &MockWorkflowRepository{ctrl: ctrl}
	mock.recorder = &MockWorkflowRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorkflowRepository) EXPECT() *MockWorkflowRepositoryMockRecorder {
	return m.recorder
}

// CreateTemplate mocks base method
func (m *MockWorkflowRepository) CreateTemplate(workflow *models.WorkflowTemplate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTemplate", workflow)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTemplate indicates an expected call of CreateTemplate
func (mr *MockWorkflowRepositoryMockRecorder) CreateTemplate(workflow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemplate", reflect.TypeOf((*MockWorkflowRepository)(nil).CreateTemplate), workflow)
}

// GetAllTemplates mocks base method
func (m *MockWorkflowRepository) GetAllTemplates() ([]*models.WorkflowTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTemplates")
	ret0, _ := ret[0].([]*models.WorkflowTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTemplates indicates an expected call of GetAllTemplates
func (mr *MockWorkflowRepositoryMockRecorder) GetAllTemplates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTemplates", reflect.TypeOf((*MockWorkflowRepository)(nil).GetAllTemplates))
}

// GetTemplateByID mocks base method
func (m *MockWorkflowRepository) GetTemplateByID(workflowID models.WorkflowTemplateID) (*models.WorkflowTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateByID", workflowID)
	ret0, _ := ret[0].(*models.WorkflowTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplateByID indicates an expected call of GetTemplateByID
func (mr *MockWorkflowRepositoryMockRecorder) GetTemplateByID(workflowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateByID", reflect.TypeOf((*MockWorkflowRepository)(nil).GetTemplateByID), workflowID)
}

// UpdateTemplate mocks base method
func (m *MockWorkflowRepository) UpdateTemplate(workflow *models.WorkflowTemplate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTemplate", workflow)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTemplate indicates an expected call of UpdateTemplate
func (mr *MockWorkflowRepositoryMockRecorder) UpdateTemplate(workflow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTemplate", reflect.TypeOf((*MockWorkflowRepository)(nil).UpdateTemplate), workflow)
}

// DeleteTemplate mocks base method
func (m *MockWorkflowRepository) DeleteTemplate(workflowID models.WorkflowTemplateID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTemplate", workflowID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTemplate indicates an expected call of DeleteTemplate
func (mr *MockWorkflowRepositoryMockRecorder) DeleteTemplate(workflowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTemplate", reflect.TypeOf((*MockWorkflowRepository)(nil).DeleteTemplate), workflowID)
}

// CreateStep mocks base method
func (m *MockWorkflowRepository) CreateStep(step *models.Step) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStep", step)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStep indicates an expected call of CreateStep
func (mr *MockWorkflowRepositoryMockRecorder) CreateStep(step interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStep", reflect.TypeOf((*MockWorkflowRepository)(nil).CreateStep), step)
}

// GetStepByID mocks base method
func (m *MockWorkflowRepository) GetStepByID(stepID models.StepID) (*models.Step, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStepByID", stepID)
	ret0, _ := ret[0].(*models.Step)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStepByID indicates an expected call of GetStepByID
func (mr *MockWorkflowRepositoryMockRecorder) GetStepByID(stepID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStepByID", reflect.TypeOf((*MockWorkflowRepository)(nil).GetStepByID), stepID)
}

// UpdateStep mocks base method
func (m *MockWorkflowRepository) UpdateStep(step *models.Step) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStep", step)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStep indicates an expected call of UpdateStep
func (mr *MockWorkflowRepositoryMockRecorder) UpdateStep(step interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStep", reflect.TypeOf((*MockWorkflowRepository)(nil).UpdateStep), step)
}

// DeleteStep mocks base method
func (m *MockWorkflowRepository) DeleteStep(stepID models.StepID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStep", stepID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStep indicates an expected call of DeleteStep
func (mr *MockWorkflowRepositoryMockRecorder) DeleteStep(stepID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStep", reflect.TypeOf((*MockWorkflowRepository)(nil).DeleteStep), stepID)
}

// CreateNextStep mocks base method
func (m *MockWorkflowRepository) CreateNextStep(nextStep *models.NextStep) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNextStep", nextStep)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNextStep indicates an expected call of CreateNextStep
func (mr *MockWorkflowRepositoryMockRecorder) CreateNextStep(nextStep interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNextStep", reflect.TypeOf((*MockWorkflowRepository)(nil).CreateNextStep), nextStep)
}

// GetLinearNextStepID mocks base method
func (m *MockWorkflowRepository) GetLinearNextStepID(stepID models.StepID) (models.StepID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinearNextStepID", stepID)
	ret0, _ := ret[0].(models.StepID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinearNextStepID indicates an expected call of GetLinearNextStepID
func (mr *MockWorkflowRepositoryMockRecorder) GetLinearNextStepID(stepID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinearNextStepID", reflect.TypeOf((*MockWorkflowRepository)(nil).GetLinearNextStepID), stepID)
}

// GetDecisions mocks base method
func (m *MockWorkflowRepository) GetDecisions(stepID models.StepID) ([]*models.NextStep, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDecisions", stepID)
	ret0, _ := ret[0].([]*models.NextStep)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDecisions indicates an expected call of GetDecisions
func (mr *MockWorkflowRepositoryMockRecorder) GetDecisions(stepID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDecisions", reflect.TypeOf((*MockWorkflowRepository)(nil).GetDecisions), stepID)
}

// IsRecordNotFoundError mocks base method
func (m *MockWorkflowRepository) IsRecordNotFoundError(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRecordNotFoundError", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRecordNotFoundError indicates an expected call of IsRecordNotFoundError
func (mr *MockWorkflowRepositoryMockRecorder) IsRecordNotFoundError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRecordNotFoundError", reflect.TypeOf((*MockWorkflowRepository)(nil).IsRecordNotFoundError), err)
}
