// Code generated by MockGen. DO NOT EDIT.
// Source: repositories/command_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	models "paper-tracker/models"
	reflect "reflect"
)

// MockCommandRepository is a mock of CommandRepository interface
type MockCommandRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCommandRepositoryMockRecorder
}

// MockCommandRepositoryMockRecorder is the mock recorder for MockCommandRepository
type MockCommandRepositoryMockRecorder struct {
	mock *MockCommandRepository
}

// NewMockCommandRepository creates a new mock instance
func NewMockCommandRepository(ctrl *gomock.Controller) *MockCommandRepository {
	mock := &MockCommandRepository{ctrl: ctrl}
	mock.recorder = &MockCommandRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommandRepository) EXPECT() *MockCommandRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockCommandRepository) Create(command *models.Command) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", command)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockCommandRepositoryMockRecorder) Create(command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCommandRepository)(nil).Create), command)
}

// GetNextCommand mocks base method
func (m *MockCommandRepository) GetNextCommand(trackerID models.TrackerID) (*models.Command, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextCommand", trackerID)
	ret0, _ := ret[0].(*models.Command)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextCommand indicates an expected call of GetNextCommand
func (mr *MockCommandRepositoryMockRecorder) GetNextCommand(trackerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextCommand", reflect.TypeOf((*MockCommandRepository)(nil).GetNextCommand), trackerID)
}

// Delete mocks base method
func (m *MockCommandRepository) Delete(commandID models.CommandID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", commandID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockCommandRepositoryMockRecorder) Delete(commandID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCommandRepository)(nil).Delete), commandID)
}

// IsRecordNotFoundError mocks base method
func (m *MockCommandRepository) IsRecordNotFoundError(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRecordNotFoundError", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRecordNotFoundError indicates an expected call of IsRecordNotFoundError
func (mr *MockCommandRepositoryMockRecorder) IsRecordNotFoundError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRecordNotFoundError", reflect.TypeOf((*MockCommandRepository)(nil).IsRecordNotFoundError), err)
}
