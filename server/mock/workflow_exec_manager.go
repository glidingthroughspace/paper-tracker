// Code generated by MockGen. DO NOT EDIT.
// Source: managers/workflow_exec_manager.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	models "paper-tracker/models"
	reflect "reflect"
)

// MockWorkflowExecManager is a mock of WorkflowExecManager interface
type MockWorkflowExecManager struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowExecManagerMockRecorder
}

// MockWorkflowExecManagerMockRecorder is the mock recorder for MockWorkflowExecManager
type MockWorkflowExecManagerMockRecorder struct {
	mock *MockWorkflowExecManager
}

// NewMockWorkflowExecManager creates a new mock instance
func NewMockWorkflowExecManager(ctrl *gomock.Controller) *MockWorkflowExecManager {
	mock := &MockWorkflowExecManager{ctrl: ctrl}
	mock.recorder = &MockWorkflowExecManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorkflowExecManager) EXPECT() *MockWorkflowExecManagerMockRecorder {
	return m.recorder
}

// GetExecCountByTemplate mocks base method
func (m *MockWorkflowExecManager) GetExecCountByTemplate(templateID models.WorkflowTemplateID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecCountByTemplate", templateID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecCountByTemplate indicates an expected call of GetExecCountByTemplate
func (mr *MockWorkflowExecManagerMockRecorder) GetExecCountByTemplate(templateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecCountByTemplate", reflect.TypeOf((*MockWorkflowExecManager)(nil).GetExecCountByTemplate), templateID)
}

// GetAllExec mocks base method
func (m *MockWorkflowExecManager) GetAllExec() ([]*models.WorkflowExec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllExec")
	ret0, _ := ret[0].([]*models.WorkflowExec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllExec indicates an expected call of GetAllExec
func (mr *MockWorkflowExecManagerMockRecorder) GetAllExec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllExec", reflect.TypeOf((*MockWorkflowExecManager)(nil).GetAllExec))
}

// GetExecsByTemplate mocks base method
func (m *MockWorkflowExecManager) GetExecsByTemplate(templateID models.WorkflowTemplateID) ([]*models.WorkflowExec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecsByTemplate", templateID)
	ret0, _ := ret[0].([]*models.WorkflowExec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecsByTemplate indicates an expected call of GetExecsByTemplate
func (mr *MockWorkflowExecManagerMockRecorder) GetExecsByTemplate(templateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecsByTemplate", reflect.TypeOf((*MockWorkflowExecManager)(nil).GetExecsByTemplate), templateID)
}

// GetExec mocks base method
func (m *MockWorkflowExecManager) GetExec(execID models.WorkflowExecID) (*models.WorkflowExec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExec", execID)
	ret0, _ := ret[0].(*models.WorkflowExec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExec indicates an expected call of GetExec
func (mr *MockWorkflowExecManagerMockRecorder) GetExec(execID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExec", reflect.TypeOf((*MockWorkflowExecManager)(nil).GetExec), execID)
}

// GetExecByTrackerID mocks base method
func (m *MockWorkflowExecManager) GetExecByTrackerID(trackerID models.TrackerID) (*models.WorkflowExec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecByTrackerID", trackerID)
	ret0, _ := ret[0].(*models.WorkflowExec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecByTrackerID indicates an expected call of GetExecByTrackerID
func (mr *MockWorkflowExecManagerMockRecorder) GetExecByTrackerID(trackerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecByTrackerID", reflect.TypeOf((*MockWorkflowExecManager)(nil).GetExecByTrackerID), trackerID)
}

// StartExecution mocks base method
func (m *MockWorkflowExecManager) StartExecution(exec *models.WorkflowExec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartExecution", exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartExecution indicates an expected call of StartExecution
func (mr *MockWorkflowExecManagerMockRecorder) StartExecution(exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartExecution", reflect.TypeOf((*MockWorkflowExecManager)(nil).StartExecution), exec)
}

// ProgressToTrackerRoom mocks base method
func (m *MockWorkflowExecManager) ProgressToTrackerRoom(trackerID models.TrackerID, roomID models.RoomID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProgressToTrackerRoom", trackerID, roomID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProgressToTrackerRoom indicates an expected call of ProgressToTrackerRoom
func (mr *MockWorkflowExecManagerMockRecorder) ProgressToTrackerRoom(trackerID, roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProgressToTrackerRoom", reflect.TypeOf((*MockWorkflowExecManager)(nil).ProgressToTrackerRoom), trackerID, roomID)
}

// ProgressToStep mocks base method
func (m *MockWorkflowExecManager) ProgressToStep(execID models.WorkflowExecID, stepID models.StepID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProgressToStep", execID, stepID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProgressToStep indicates an expected call of ProgressToStep
func (mr *MockWorkflowExecManagerMockRecorder) ProgressToStep(execID, stepID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProgressToStep", reflect.TypeOf((*MockWorkflowExecManager)(nil).ProgressToStep), execID, stepID)
}

// SetExecutionFinished mocks base method
func (m *MockWorkflowExecManager) SetExecutionFinished(execID models.WorkflowExecID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetExecutionFinished", execID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetExecutionFinished indicates an expected call of SetExecutionFinished
func (mr *MockWorkflowExecManagerMockRecorder) SetExecutionFinished(execID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExecutionFinished", reflect.TypeOf((*MockWorkflowExecManager)(nil).SetExecutionFinished), execID)
}

// CancelExec mocks base method
func (m *MockWorkflowExecManager) CancelExec(execID models.WorkflowExecID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelExec", execID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelExec indicates an expected call of CancelExec
func (mr *MockWorkflowExecManagerMockRecorder) CancelExec(execID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelExec", reflect.TypeOf((*MockWorkflowExecManager)(nil).CancelExec), execID)
}
