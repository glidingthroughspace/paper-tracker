// Code generated by MockGen. DO NOT EDIT.
// Source: managers/workflow_template_manager.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	models "paper-tracker/models"
	communication "paper-tracker/models/communication"
	reflect "reflect"
)

// MockWorkflowTemplateManager is a mock of WorkflowTemplateManager interface
type MockWorkflowTemplateManager struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowTemplateManagerMockRecorder
}

// MockWorkflowTemplateManagerMockRecorder is the mock recorder for MockWorkflowTemplateManager
type MockWorkflowTemplateManagerMockRecorder struct {
	mock *MockWorkflowTemplateManager
}

// NewMockWorkflowTemplateManager creates a new mock instance
func NewMockWorkflowTemplateManager(ctrl *gomock.Controller) *MockWorkflowTemplateManager {
	mock := &MockWorkflowTemplateManager{ctrl: ctrl}
	mock.recorder = &MockWorkflowTemplateManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorkflowTemplateManager) EXPECT() *MockWorkflowTemplateManagerMockRecorder {
	return m.recorder
}

// CreateTemplate mocks base method
func (m *MockWorkflowTemplateManager) CreateTemplate(template *models.WorkflowTemplate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTemplate", template)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTemplate indicates an expected call of CreateTemplate
func (mr *MockWorkflowTemplateManagerMockRecorder) CreateTemplate(template interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemplate", reflect.TypeOf((*MockWorkflowTemplateManager)(nil).CreateTemplate), template)
}

// CreateTemplateStart mocks base method
func (m *MockWorkflowTemplateManager) CreateTemplateStart(templateID models.WorkflowTemplateID, step *models.Step) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTemplateStart", templateID, step)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTemplateStart indicates an expected call of CreateTemplateStart
func (mr *MockWorkflowTemplateManagerMockRecorder) CreateTemplateStart(templateID, step interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemplateStart", reflect.TypeOf((*MockWorkflowTemplateManager)(nil).CreateTemplateStart), templateID, step)
}

// AddTemplateStep mocks base method
func (m *MockWorkflowTemplateManager) AddTemplateStep(templateID models.WorkflowTemplateID, prevStepID models.StepID, decisionLabel string, step *models.Step) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTemplateStep", templateID, prevStepID, decisionLabel, step)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTemplateStep indicates an expected call of AddTemplateStep
func (mr *MockWorkflowTemplateManagerMockRecorder) AddTemplateStep(templateID, prevStepID, decisionLabel, step interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTemplateStep", reflect.TypeOf((*MockWorkflowTemplateManager)(nil).AddTemplateStep), templateID, prevStepID, decisionLabel, step)
}

// GetAllTemplates mocks base method
func (m *MockWorkflowTemplateManager) GetAllTemplates() ([]*models.WorkflowTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTemplates")
	ret0, _ := ret[0].([]*models.WorkflowTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTemplates indicates an expected call of GetAllTemplates
func (mr *MockWorkflowTemplateManagerMockRecorder) GetAllTemplates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTemplates", reflect.TypeOf((*MockWorkflowTemplateManager)(nil).GetAllTemplates))
}

// GetTemplate mocks base method
func (m *MockWorkflowTemplateManager) GetTemplate(templateID models.WorkflowTemplateID) (*models.WorkflowTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplate", templateID)
	ret0, _ := ret[0].(*models.WorkflowTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplate indicates an expected call of GetTemplate
func (mr *MockWorkflowTemplateManagerMockRecorder) GetTemplate(templateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplate", reflect.TypeOf((*MockWorkflowTemplateManager)(nil).GetTemplate), templateID)
}

// UpdateTemplateLabel mocks base method
func (m *MockWorkflowTemplateManager) UpdateTemplateLabel(templateID models.WorkflowTemplateID, label string) (*models.WorkflowTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTemplateLabel", templateID, label)
	ret0, _ := ret[0].(*models.WorkflowTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTemplateLabel indicates an expected call of UpdateTemplateLabel
func (mr *MockWorkflowTemplateManagerMockRecorder) UpdateTemplateLabel(templateID, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTemplateLabel", reflect.TypeOf((*MockWorkflowTemplateManager)(nil).UpdateTemplateLabel), templateID, label)
}

// GetStepByID mocks base method
func (m *MockWorkflowTemplateManager) GetStepByID(templateID models.WorkflowTemplateID, stepID models.StepID) (*models.Step, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStepByID", templateID, stepID)
	ret0, _ := ret[0].(*models.Step)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStepByID indicates an expected call of GetStepByID
func (mr *MockWorkflowTemplateManagerMockRecorder) GetStepByID(templateID, stepID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStepByID", reflect.TypeOf((*MockWorkflowTemplateManager)(nil).GetStepByID), templateID, stepID)
}

// UpdateStep mocks base method
func (m *MockWorkflowTemplateManager) UpdateStep(templateID models.WorkflowTemplateID, step *models.Step) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStep", templateID, step)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStep indicates an expected call of UpdateStep
func (mr *MockWorkflowTemplateManagerMockRecorder) UpdateStep(templateID, step interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStep", reflect.TypeOf((*MockWorkflowTemplateManager)(nil).UpdateStep), templateID, step)
}

// DeleteStep mocks base method
func (m *MockWorkflowTemplateManager) DeleteStep(templateID models.WorkflowTemplateID, stepID models.StepID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStep", templateID, stepID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStep indicates an expected call of DeleteStep
func (mr *MockWorkflowTemplateManagerMockRecorder) DeleteStep(templateID, stepID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStep", reflect.TypeOf((*MockWorkflowTemplateManager)(nil).DeleteStep), templateID, stepID)
}

// CreateNewRevision mocks base method
func (m *MockWorkflowTemplateManager) CreateNewRevision(oldID models.WorkflowTemplateID, revisionLabel string) (*models.WorkflowTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewRevision", oldID, revisionLabel)
	ret0, _ := ret[0].(*models.WorkflowTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewRevision indicates an expected call of CreateNewRevision
func (mr *MockWorkflowTemplateManagerMockRecorder) CreateNewRevision(oldID, revisionLabel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewRevision", reflect.TypeOf((*MockWorkflowTemplateManager)(nil).CreateNewRevision), oldID, revisionLabel)
}

// NumberOfStepsReferringToRoom mocks base method
func (m *MockWorkflowTemplateManager) NumberOfStepsReferringToRoom(roomID models.RoomID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberOfStepsReferringToRoom", roomID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberOfStepsReferringToRoom indicates an expected call of NumberOfStepsReferringToRoom
func (mr *MockWorkflowTemplateManagerMockRecorder) NumberOfStepsReferringToRoom(roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberOfStepsReferringToRoom", reflect.TypeOf((*MockWorkflowTemplateManager)(nil).NumberOfStepsReferringToRoom), roomID)
}

// DeleteTemplate mocks base method
func (m *MockWorkflowTemplateManager) DeleteTemplate(templateID models.WorkflowTemplateID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTemplate", templateID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTemplate indicates an expected call of DeleteTemplate
func (mr *MockWorkflowTemplateManagerMockRecorder) DeleteTemplate(templateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTemplate", reflect.TypeOf((*MockWorkflowTemplateManager)(nil).DeleteTemplate), templateID)
}

// MoveStep mocks base method
func (m *MockWorkflowTemplateManager) MoveStep(templateID models.WorkflowTemplateID, stepID models.StepID, direction communication.StepMoveDirection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveStep", templateID, stepID, direction)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveStep indicates an expected call of MoveStep
func (mr *MockWorkflowTemplateManagerMockRecorder) MoveStep(templateID, stepID, direction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveStep", reflect.TypeOf((*MockWorkflowTemplateManager)(nil).MoveStep), templateID, stepID, direction)
}
