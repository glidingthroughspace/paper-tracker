// Code generated by MockGen. DO NOT EDIT.
// Source: repositories/scan_result_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	models "paper-tracker/models"
	reflect "reflect"
)

// MockScanResultRepository is a mock of ScanResultRepository interface
type MockScanResultRepository struct {
	ctrl     *gomock.Controller
	recorder *MockScanResultRepositoryMockRecorder
}

// MockScanResultRepositoryMockRecorder is the mock recorder for MockScanResultRepository
type MockScanResultRepositoryMockRecorder struct {
	mock *MockScanResultRepository
}

// NewMockScanResultRepository creates a new mock instance
func NewMockScanResultRepository(ctrl *gomock.Controller) *MockScanResultRepository {
	mock := &MockScanResultRepository{ctrl: ctrl}
	mock.recorder = &MockScanResultRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScanResultRepository) EXPECT() *MockScanResultRepositoryMockRecorder {
	return m.recorder
}

// CreateAll mocks base method
func (m *MockScanResultRepository) CreateAll(scanRes []*models.ScanResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAll", scanRes)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAll indicates an expected call of CreateAll
func (mr *MockScanResultRepositoryMockRecorder) CreateAll(scanRes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAll", reflect.TypeOf((*MockScanResultRepository)(nil).CreateAll), scanRes)
}

// GetAllForTracker mocks base method
func (m *MockScanResultRepository) GetAllForTracker(trackerID models.TrackerID) ([]*models.ScanResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForTracker", trackerID)
	ret0, _ := ret[0].([]*models.ScanResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForTracker indicates an expected call of GetAllForTracker
func (mr *MockScanResultRepositoryMockRecorder) GetAllForTracker(trackerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForTracker", reflect.TypeOf((*MockScanResultRepository)(nil).GetAllForTracker), trackerID)
}

// DeleteForTracker mocks base method
func (m *MockScanResultRepository) DeleteForTracker(trackerID models.TrackerID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteForTracker", trackerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteForTracker indicates an expected call of DeleteForTracker
func (mr *MockScanResultRepositoryMockRecorder) DeleteForTracker(trackerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteForTracker", reflect.TypeOf((*MockScanResultRepository)(nil).DeleteForTracker), trackerID)
}

// IsRecordNotFoundError mocks base method
func (m *MockScanResultRepository) IsRecordNotFoundError(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRecordNotFoundError", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRecordNotFoundError indicates an expected call of IsRecordNotFoundError
func (mr *MockScanResultRepositoryMockRecorder) IsRecordNotFoundError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRecordNotFoundError", reflect.TypeOf((*MockScanResultRepository)(nil).IsRecordNotFoundError), err)
}
