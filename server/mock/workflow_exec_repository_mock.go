// Code generated by MockGen. DO NOT EDIT.
// Source: repositories/workflow_exec_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	models "paper-tracker/models"
	reflect "reflect"
)

// MockWorkflowExecRepository is a mock of WorkflowExecRepository interface
type MockWorkflowExecRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowExecRepositoryMockRecorder
}

// MockWorkflowExecRepositoryMockRecorder is the mock recorder for MockWorkflowExecRepository
type MockWorkflowExecRepositoryMockRecorder struct {
	mock *MockWorkflowExecRepository
}

// NewMockWorkflowExecRepository creates a new mock instance
func NewMockWorkflowExecRepository(ctrl *gomock.Controller) *MockWorkflowExecRepository {
	mock := &MockWorkflowExecRepository{ctrl: ctrl}
	mock.recorder = &MockWorkflowExecRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorkflowExecRepository) EXPECT() *MockWorkflowExecRepositoryMockRecorder {
	return m.recorder
}

// CreateExec mocks base method
func (m *MockWorkflowExecRepository) CreateExec(exec *models.WorkflowExec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExec", exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateExec indicates an expected call of CreateExec
func (mr *MockWorkflowExecRepositoryMockRecorder) CreateExec(exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExec", reflect.TypeOf((*MockWorkflowExecRepository)(nil).CreateExec), exec)
}

// GetAllExec mocks base method
func (m *MockWorkflowExecRepository) GetAllExec() ([]*models.WorkflowExec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllExec")
	ret0, _ := ret[0].([]*models.WorkflowExec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllExec indicates an expected call of GetAllExec
func (mr *MockWorkflowExecRepositoryMockRecorder) GetAllExec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllExec", reflect.TypeOf((*MockWorkflowExecRepository)(nil).GetAllExec))
}

// GetExecByID mocks base method
func (m *MockWorkflowExecRepository) GetExecByID(execID models.WorkflowExecID) (*models.WorkflowExec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecByID", execID)
	ret0, _ := ret[0].(*models.WorkflowExec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecByID indicates an expected call of GetExecByID
func (mr *MockWorkflowExecRepositoryMockRecorder) GetExecByID(execID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecByID", reflect.TypeOf((*MockWorkflowExecRepository)(nil).GetExecByID), execID)
}

// GetRunningExecByTrackerID mocks base method
func (m *MockWorkflowExecRepository) GetRunningExecByTrackerID(trackerID models.TrackerID) (*models.WorkflowExec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunningExecByTrackerID", trackerID)
	ret0, _ := ret[0].(*models.WorkflowExec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRunningExecByTrackerID indicates an expected call of GetRunningExecByTrackerID
func (mr *MockWorkflowExecRepositoryMockRecorder) GetRunningExecByTrackerID(trackerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunningExecByTrackerID", reflect.TypeOf((*MockWorkflowExecRepository)(nil).GetRunningExecByTrackerID), trackerID)
}

// GetExecsByTemplateID mocks base method
func (m *MockWorkflowExecRepository) GetExecsByTemplateID(templateID models.WorkflowTemplateID) ([]*models.WorkflowExec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecsByTemplateID", templateID)
	ret0, _ := ret[0].([]*models.WorkflowExec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecsByTemplateID indicates an expected call of GetExecsByTemplateID
func (mr *MockWorkflowExecRepositoryMockRecorder) GetExecsByTemplateID(templateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecsByTemplateID", reflect.TypeOf((*MockWorkflowExecRepository)(nil).GetExecsByTemplateID), templateID)
}

// UpdateExec mocks base method
func (m *MockWorkflowExecRepository) UpdateExec(exec *models.WorkflowExec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExec", exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExec indicates an expected call of UpdateExec
func (mr *MockWorkflowExecRepositoryMockRecorder) UpdateExec(exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExec", reflect.TypeOf((*MockWorkflowExecRepository)(nil).UpdateExec), exec)
}

// DeleteExec mocks base method
func (m *MockWorkflowExecRepository) DeleteExec(execID models.WorkflowExecID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExec", execID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExec indicates an expected call of DeleteExec
func (mr *MockWorkflowExecRepositoryMockRecorder) DeleteExec(execID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExec", reflect.TypeOf((*MockWorkflowExecRepository)(nil).DeleteExec), execID)
}

// CreateExecStepInfo mocks base method
func (m *MockWorkflowExecRepository) CreateExecStepInfo(execStepInfo *models.ExecStepInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExecStepInfo", execStepInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateExecStepInfo indicates an expected call of CreateExecStepInfo
func (mr *MockWorkflowExecRepositoryMockRecorder) CreateExecStepInfo(execStepInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExecStepInfo", reflect.TypeOf((*MockWorkflowExecRepository)(nil).CreateExecStepInfo), execStepInfo)
}

// GetExecStepInfoByID mocks base method
func (m *MockWorkflowExecRepository) GetExecStepInfoByID(execID models.WorkflowExecID, stepID models.StepID) (*models.ExecStepInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecStepInfoByID", execID, stepID)
	ret0, _ := ret[0].(*models.ExecStepInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecStepInfoByID indicates an expected call of GetExecStepInfoByID
func (mr *MockWorkflowExecRepositoryMockRecorder) GetExecStepInfoByID(execID, stepID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecStepInfoByID", reflect.TypeOf((*MockWorkflowExecRepository)(nil).GetExecStepInfoByID), execID, stepID)
}

// GetExecStepInfoForExecID mocks base method
func (m *MockWorkflowExecRepository) GetExecStepInfoForExecID(execID models.WorkflowExecID) ([]*models.ExecStepInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecStepInfoForExecID", execID)
	ret0, _ := ret[0].([]*models.ExecStepInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecStepInfoForExecID indicates an expected call of GetExecStepInfoForExecID
func (mr *MockWorkflowExecRepositoryMockRecorder) GetExecStepInfoForExecID(execID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecStepInfoForExecID", reflect.TypeOf((*MockWorkflowExecRepository)(nil).GetExecStepInfoForExecID), execID)
}

// UpdateExecStepInfo mocks base method
func (m *MockWorkflowExecRepository) UpdateExecStepInfo(execStepInfo *models.ExecStepInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExecStepInfo", execStepInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExecStepInfo indicates an expected call of UpdateExecStepInfo
func (mr *MockWorkflowExecRepositoryMockRecorder) UpdateExecStepInfo(execStepInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExecStepInfo", reflect.TypeOf((*MockWorkflowExecRepository)(nil).UpdateExecStepInfo), execStepInfo)
}

// DeleteExecStepInfo mocks base method
func (m *MockWorkflowExecRepository) DeleteExecStepInfo(execID models.WorkflowExecID, stepID models.StepID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExecStepInfo", execID, stepID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExecStepInfo indicates an expected call of DeleteExecStepInfo
func (mr *MockWorkflowExecRepositoryMockRecorder) DeleteExecStepInfo(execID, stepID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExecStepInfo", reflect.TypeOf((*MockWorkflowExecRepository)(nil).DeleteExecStepInfo), execID, stepID)
}

// IsRecordNotFoundError mocks base method
func (m *MockWorkflowExecRepository) IsRecordNotFoundError(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRecordNotFoundError", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRecordNotFoundError indicates an expected call of IsRecordNotFoundError
func (mr *MockWorkflowExecRepositoryMockRecorder) IsRecordNotFoundError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRecordNotFoundError", reflect.TypeOf((*MockWorkflowExecRepository)(nil).IsRecordNotFoundError), err)
}
